---
import Skeleton from "./Skeleton.astro";
import Tag from "../components/Tag.astro";
import { getPosts } from "../utils/getPosts";

export interface Props {
	content: {
		title: string;
		description?: string;
		pubDate: string;
		updatedDate?: string;
		heroImage?: string;
		source?: string;
		tags?: string[];
		unlisted?: boolean
	};
}

function formatDate(dateString: string): string {
	return new Date(dateString).toLocaleDateString("en-us", {
		year: "numeric",
		month: "short",
		day: "numeric",
		hour: "numeric",
		minute: "2-digit",
		timeZoneName: "short",
	});
}

const {
	content: { title, description, pubDate, updatedDate, heroImage, source, tags, unlisted },
} = Astro.props;

if (tags) {
	tags.sort();
}

const skeletonContent = {
	title: title,
	description: description,
	image: heroImage,
	isBlogPost: true,
};

const posts = getPosts();

var history;
var previous;
var next;

if (source) {
	history = `https://github.com/jordemort/jordemort.github.io/commits/main/${source}`;

	let found = false;
	let i = 0;

	for (i = 0; i < posts.length; i++) {
		if (posts[i].frontmatter.source === source) {
			found = true;
			break;
		}
	}

	if (found) {
		if (i > 0) {
			next = {
				title: posts[i - 1].frontmatter.title,
				url: posts[i - 1].url + "/",
			};
		}

		if (i < posts.length - 1) {
			previous = {
				title: posts[i + 1].frontmatter.title,
				url: posts[i + 1].url + "/",
			};
		}
	}
}
---

<Skeleton content={skeletonContent}>
	<slot name="nav" slot="nav" />
	{tags && (
		<meta name="keywords" content={tags.join(",")} slot="head" />
	)}
	<style>
		.postdate {
			font-size: smaller;
			font-weight: 300;
			text-align: right;
		}

		.description {
			font-weight: 300;
			font-style: italic;
		}

		.e-content {
			padding-top: 1rem;
		}

		.timeline {
			width: 100%;
			padding-top: 2rem;
			padding-bottom: 2rem;
			font-size: smaller;
			font-weight: bold;
			clear: both;
		}

		.tag-list {
			padding-top: 1em;
			text-align: center;
			max-width: 80%;
			margin-left: auto;
			margin-right: auto;
		}

		@media only screen and (min-width: 800px) {
			.previous-post {
				float: left;
			}

			.next-post {
				float: right;
			}
		}
	</style>
	<article>
		<header>
			{heroImage && <img width={720} height={360} src={heroImage} alt="" />}
			<h1 class="title p-name" itemprop="headline">{title}</h1>
			{
				description && (
					<div class="p-summary description" itemprop="abstract">
						{description}
					</div>
				)
			}
		</header>
		<div class="e-content" itemprop="articleBody">
			<slot />
		</div>
		<footer>
			<div class="postdate">
				Posted on{" "}
				<time class="dt-published" itemprop="datePublished" datetime={pubDate}>
					{formatDate(pubDate)}
				</time>
			</div>
			{
				updatedDate && source && (
					<div class="postdate">
						Last <a href={history}>updated</a> on{" "}
						<time
							class="dt-updated"
							itemprop="dateModified"
							datetime={updatedDate}
						>
							{formatDate(updatedDate)}
						</time>
					</div>
				)
			}
			{tags && (
				<div class="tag-list">
				{ tags.map((tag) => (
					<Fragment><Tag tag={tag} />{" "}</Fragment>
				))}
				</div>
			)}
			{
				(previous || next) && (
					<nav class="timeline">
						{previous && (
							<div class="previous-post">
								<a href={previous.url} rel="prev">↞ {previous.title}</a>
							</div>
						)}
						{next && (
							<div class="next-post">
								<a href={next.url} rel="next">{next.title} ↠</a>
							</div>
						)}
					</nav>
				)
			}
			<a class="u-url u-uid" rel="canonical" href={Astro.request.url}></a>
			{unlisted &&
				<span class="p-category" style="display: none">unlisted</span>
			}
		</footer>
	</article>
</Skeleton>
