---
import Skeleton from "./Skeleton.astro";

export interface Props {
	content: {
		title: string;
		description?: string;
		pubDate: string;
		updatedDate?: string;
		heroImage?: string;
		schema?: string;
		tags?: string[];
	};
}

function formatDate(dateString: string): string {
	return new Date(dateString).toLocaleDateString("en-us", {
		year: "numeric",
		month: "short",
		day: "numeric",
		hour: "numeric",
		minute: "2-digit",
		timeZoneName: "short",
	});
}

const {
	content: {
		title,
		description,
		pubDate,
		updatedDate,
		heroImage,
	},
} = Astro.props;

const skeletonContent = {
	title: title,
	description: description,
	image: heroImage,
	isBlogPost: true
}
---

<Skeleton content={skeletonContent}>
	<slot name="head" slot="head" />
	<slot name="nav" slot="nav" />
	<style>
		.postdate {
			font-size: smaller;
			font-weight: 300;
			text-align: right;
		}

		.description {
			font-size: smaller;
			font-weight: 300;
			font-style: italic;
		}

		.e-content {
			padding-top: 1rem;
		}
	</style>
	<article>
		<header>
			{heroImage && <img width={720} height={360} src={heroImage} alt="" />}
			<h1 class="title p-name" itemprop="headline">{title}</h1>
			{description && <div class="p-summary description" itemprop="abstract">{description}</div>}
		</header>
		<div class="e-content" itemprop="articleBody">
			<slot />
		</div>
		<footer>
			<div class="postdate">
				Posted on{" "}
				<time class="dt-published" itemprop="datePublished" datetime={pubDate}>
					{formatDate(pubDate)}
				</time>
			</div>
			{
				updatedDate && (
					<div class="postdate">
						Last updated on{" "}
						<time
							class="dt-updated"
							itemprop="dateModified"
							datetime={updatedDate}
						>
							{formatDate(updatedDate)}
						</time>
					</div>
				)
			}
			<a class="u-url" rel="canonical" href={Astro.request.url}></a>
		</footer>
	</article>
</Skeleton>
